{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
		
	//
	// C++の構文のスニペット
	//
	
	"for loop[0, n)": {
		"prefix": "REP",
		"body": "for(int ${1:i} = 0; ${1:i} < ${2:n}; ++${1:i}){\n    \n}",
		"description": "for loop[0, n)"
	},
	
	"for loop[1, n]": {
		"prefix": "REP1",
		"body": "for(int ${1:i} = 1; ${1:i} <= ${2:n}; ++${1:i}){\n    \n}",
		"description": "for loop[1, n]"
	},
	
	"for loop n-1 to 0" : {
		"prefix": "RREP",
		"body": "for(int ${1:i} = ${2:n} - 1; ${1:i} >= 0; --${1:i}){\n    \n}",
		"description": "for loop n-1 to 0"
	},
	
	"Range-based for loop" : {
		"prefix": "fore",
		"body": "for(auto && ${1:i} : ${2:a}){\n    \n}",
		"description": "Range-based for loop"
	},
	

	//
	// 型関連のスニペット
	//

	"vector" : {
		"prefix": "ve",
		"body": "vector<$1>",
		"description": "vector"
	},
	
	"vector<int>" : {
		"prefix": "vi",
		"body": "vector<int>",
		"description": "vector<int>"
	},

	"vector<vector<int>>" : {
		"prefix": "vvi",
		"body": "vector<vector<int>>",
		"description": "vector<vector<<int>>"
	},

	"vector<ll>" : {
		"prefix": "vl",
		"body": "vector<ll>",
		"description": "vector<ll>"
	},

	"vector<string>" : {
		"prefix": "vs",
		"body": "vector<string>",
		"description": "vector<string>"
	},

	"Edge": {
		"prefix": "edge",
		"body": [
			"struct Edge{",
			"    int to;",
			"    ${1:T} cost;",
			"};",
			"vector<Edge> g[${2:n}];",
			""
		],
		"description": "Edge"
	},

	//
	// 変数入力系スニペット
	//

	"define and read (int)" : {
		"prefix": "INT",
		"body": [
			"int ${1:x};",
			"cin >> $1;"
		],
		"description": "declare a integer and read the value from stdin"
	},

	"define and read (int, int)" : {
		"prefix": "INT2",
		"body": [
			"int ${1:x}, ${2:y};",
			"cin >> $1 >> $2;"
		],
		"description": "declare two integers and read the value from stdin"
	},

	"define and read (int, int, int)" : {
		"prefix": "INT3",
		"body": [
			"int ${1:x}, ${2:y}, ${3:z};",
			"cin >> $1 >> $2 >> $3;"
		],
		"description": "declare three integers and read the value from stdin"
	},

	"define and read (ll)" : {
		"prefix": "LL",
		"body": [
			"ll ${1:x};",
			"cin >> $1;"
		],
		"description": "declare a ll integer and read the value from stdin"
	},

	"define and read (ll, ll)" : {
		"prefix": "LL2",
		"body": [
			"ll ${1:x}, ${2:y};",
			"cin >> $1 >> $2;"
		],
		"description": "declare two ll integers and read the value from stdin"
	},

	"define and read (ll, ll, ll)" : {
		"prefix": "LL3",
		"body": [
			"ll ${1:x}, ${2:y}, ${3:z};",
			"cin >> $1 >> $2 >> $3;"
		],
		"description": "declare three ll integers and read the value from stdin"
	},


	"define and read (string)" : {
		"prefix": "STR",
		"body": [
			"string ${1:s};",
			"cin >> $1;"
		],
		"description": "declare a string and read the value from stdin"
	},

	"define and read (string, string)" : {
		"prefix": "STR2",
		"body": [
			"string ${1:s}, ${2:t};",
			"cin >> $1 >> $2;"
		],
		"description": "declare two strings and read the value from stdin"
	},

	"define and read (vector<int>)" : {
		"prefix": "VI",
		"body": [
			"vector<int> ${1:a}(${2:n});",
			"for (int i = 0; i < $2; ++i) {",
			"    cin >> $1[i];",
			"}",
			""
		],
		"description": "declare vector<int> and read the value from stdin"
	},

	"define and read (vector<ll>)" : {
		"prefix": "VL",
		"body": [
			"vector<ll> ${1:a}(${2:n});",
			"for (int i = 0; i < $2; ++i) {",
			"    cin >> $1[i];",
			"}",
			""
		],
		"description": "declare vector<ll> and read the value from stdin"
	},

	"define and read (vector<string>)" : {
		"prefix": "VS",
		"body": [
			"vector<string> ${1:s}(${2:n});",
			"for (int i = 0; i < $2; ++i) {",
			"    cin >> $1[i];",
			"}",
			""
		],
		"description": "declare vector<string> and read the value from stdin"
	},

	//
	// アルゴリズムでないスニペット(便利系)
	//
	
	"all" : {
		"prefix": "all",
		"body": "begin($1), end($1)",
		"description": "all"
	},

	"YesNo" : {
		"prefix": "YesNo",
		"body": "cout << ($1 ? \"Yes\" : \"No\") << \"\\n\";"
	},
	
	"read edges" : {
		"prefix": "readedges",
		"body": [
			"for (int i = 0; i < ${1:m}; ++i) {",
			"    int node1, node2;",
			"    cin >> node1 >> node2;",
			"    node1--;",
			"    node2--;",
			"    ${2:g}[node1].push_back(node2);",
			"    ${2:g}[node2].push_back(node1);",
			"}"
		],
		"description": "read edges from stdin"
	},

	"factorial kit" : {
		"prefix": "factorial",
		"body": [
			"constexpr int MAX_FACT = 4000000;",
			"modint998244353 fact[MAX_FACT + 1] = {1};",
			"modint998244353 inv[MAX_FACT + 1] = {1};",
			"",
			"modint998244353 init_fact(int n) {",
			"    for(int i = 1; i <= MAX_FACT; ++i){",
			"        fact[i] = fact[i - 1] * i;",
			"        inv[i] = fact[i].inv();",
			"    }",
			"}",
			"",
			"modint998244353 nCk(int n, int k) {",
			"    if(n < k) return 0;",
			"    return fact[n] * inv[k] * inv[n-k];",
			"}",
			""
		],
		"description": "factorial and nCk"
	},
	
	//
	// アルゴリズムのスニペット
	//
	
	"Dijkstra" : {
		"prefix": "dijkstra",
		"body": [
			"priority_queue<pair<${1:T}, int>, vector<pair<${1:T}, int>>, greater<pair<${1:T}, int>>> ${2:que};",
			"vector<${1:T}> d(n, INF);",
			"d[${3:s}] = 0;",
			"${2:que}.push({${1:T}(0), ${3:s}});",
			"",
			"while(!${2:que}.empty()){",
			"    ${1:T} c = ${2:que}.top().first;",
			"    int v = ${2:que}.top().second;",
			"    ${2:que}.pop();",
			"    ",
			"    for(auto && e : g[v]){",
			"        if(d[e.to] > c + e.cost){",
			"            d[e.to] = c + e.cost;",
			"            ${2:que}.push({d[e.to], e.to});",
			"        }",
			"    }",
			"}",
			""
		],
		"description": "dijkstra code"
	},

	"Dinic": {
		"prefix": "Dinic",
		"body": [
			"template<typename T>",
			"class Dinic{",
			"    struct Edge{",
			"        int to, rev;",
			"        T cap;",
			"        Edge(int to, int rev, T cap) : to(to), rev(rev), cap(cap){}",
			"    };",
			"",
			"    vector<vector<Edge>> g; // グラフ",
			"    vector<int> level, iter; // スタートからの距離、どこまで調べ終わったか",
			"    int size;",
			"public:",
			"    Dinic(int size) : g(size, vector<Edge>()), size(size){}",
			"",
			"    void init(int size){",
			"        g = vector<vector<Edge>>(size, vector<Edge>());",
			"        this->size = size;",
			"    }",
			"",
			"    void add_edge(int from, int to, T cap){",
			"        g[from].push_back(Edge(to, g[to].size(), cap));",
			"        g[to].push_back(Edge(from, g[from].size() - 1, 0));",
			"    }",
			"",
			"    void bfs(int s){",
			"        level = vector<int>(size, -1);",
			"        queue<int> que;",
			"        level[s] = 0;",
			"        que.push(0);",
			"        while (!que.empty()){",
			"            int v = que.front(); que.pop();",
			"            for(auto && e : g[v]){",
			"                if(e.cap > 0 && level[e.to] < 0){",
			"                    level[e.to] = level[v] + 1;",
			"                    que.push(e.to);",
			"                }",
			"            }",
			"        }",
			"    }",
			"",
			"    int dfs(int v, int t, int f){",
			"        if(v == t) return f;",
			"        for(int i = iter[v]; i < g[v].size(); ++i){",
			"            Edge &e = g[v][i];",
			"            if(e.cap > 0 && level[v] < level[e.to]){",
			"                int d = dfs(e.to, t, min(f, e.cap));",
			"                if(d > 0){",
			"                    e.cap -= d;",
			"                    g[e.to][e.rev].cap += d;",
			"                    return d;",
			"                }",
			"            }",
			"        }",
			"        return 0;",
			"    }",
			"",
			"    int max_flow(int s, int t){",
			"        int flow = 0;",
			"        while(true){",
			"            bfs(s);",
			"            if(level[t] < 0) return flow;",
			"            iter = vector<int>(size);",
			"            int f;",
			"            while((f = dfs(s, t, INF)) > 0) flow += f;",
			"        }",
			"    }",
			"};",
			"",
		],
		"description": "Dinic"
	},

	"Extend GCD": {
		"prefix": "extgcd define",
		"body":[
			"int extgcd(int a, int b, int &x, int &y){",
			"    int d = a;",
			"    if(b != 0){",
			"        d = extgcd(b, a % b, y, x);",
			"        y -= (a / b) * x;",
			"    }",
			"    else{",
			"        x = 1; y = 0;",
			"    }",
			"    return d;",
			"}"
		],
		"description": "Define extgcd"
	}
}
{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	
	//
	// C++の構文のスニペット
	//
	
	"for loop[0, n)": {
		"prefix": "REP",
		"body": "for(int ${1:i} = 0; ${1:i} < ${2:n}; ++${1:i}){\n    \n}",
		"description": "for loop[0, n)"
	},
	
	"for loop[1, n]": {
		"prefix": "REP1",
		"body": "for(int ${1:i} = 1; ${1:i} <= ${2:n}; ++${1:i}){\n    \n}",
		"description": "for loop[1, n]"
	},
	
	"for loop n-1 to 0" : {
		"prefix": "RREP",
		"body": "for(int ${1:i} = ${2:n} - 1; ${1:i} >= 0; --${1:i}){\n    \n}",
		"description": "for loop n-1 to 0"
	},
	
	"Range-based for loop" : {
		"prefix": "fore",
		"body": "for(auto && ${1:i} : ${2:a}){\n    \n}",
		"description": "Range-based for loop"
	},
	
	//
	// アルゴリズムでないスニペット(便利系)
	//
	
	"all" : {
		"prefix": "all",
		"body": "begin($1), end($1)",
		"description": "all"
	},
	
	"vector" : {
		"prefix": "ve",
		"body": "vector<$1>",
		"description": "vector"
	},
	
	"vector<int>" : {
		"prefix": "vi",
		"body": "vector<int>",
		"description": "vector<int>"
	},

	"vector<string>" : {
		"prefix": "vs",
		"body": "vector<string>",
		"description": "vector<string>"
	},
	
	//
	// アルゴリズムのスニペット
	//
	
	"Dijkstra" : {
		"prefix": "dijkstra",
		"body": [
			"priority_queue<pair<${1:T}, int>, vector<pair<${1:T}, int>>, greater<pair<${1:T}, int>>> ${2:que};",
			"vector<${1:T}> d(n, INF);",
			"d[${3:s}] = 0;",
			"${2:que}.push({${1:T}(0), ${3:s}});",
			"",
			"while(!${2:que}.empty()){",
			"    ${1:T} c = ${2:que}.top().first;",
			"    int v = ${2:que}.top().second;",
			"    ${2:que}.pop();",
			"    ",
			"    for(auto && e : g[v]){",
			"        if(d[e.to] > c + e.cost){",
			"            d[e.to] = c + e.cost;",
			"            ${2:que}.push({d[e.to], e.to});",
			"        }",
			"    }",
			"}",
			""
		],
		"description": "dijkstra code"
	},

	"Dinic": {
		"prefix": "Dinic",
		"body": [
			"template<typename T>",
			"class Dinic{",
			"    struct Edge{",
			"        int to, rev;",
			"        T cap;",
			"        Edge(int to, int rev, T cap) : to(to), rev(rev), cap(cap){}",
			"    };",
			"",
			"    vector<vector<Edge>> g; // グラフ",
			"    vector<int> level, iter; // スタートからの距離、どこまで調べ終わったか",
			"    int size;",
			"public:",
			"    Dinic(int size) : g(size, vector<Edge>()), size(size){}",
			"",
			"    void init(int size){",
			"        g = vector<vector<Edge>>(size, vector<Edge>());",
			"        this->size = size;",
			"    }",
			"",
			"    void add_edge(int from, int to, T cap){",
			"        g[from].push_back(Edge(to, g[to].size(), cap));",
			"        g[to].push_back(Edge(from, g[from].size() - 1, 0));",
			"    }",
			"",
			"    void bfs(int s){",
			"        level = vector<int>(size, -1);",
			"        queue<int> que;",
			"        level[s] = 0;",
			"        que.push(0);",
			"        while (!que.empty()){",
			"            int v = que.front(); que.pop();",
			"            for(auto && e : g[v]){",
			"                if(e.cap > 0 && level[e.to] < 0){",
			"                    level[e.to] = level[v] + 1;",
			"                    que.push(e.to);",
			"                }",
			"            }",
			"        }",
			"    }",
			"",
			"    int dfs(int v, int t, int f){",
			"        if(v == t) return f;",
			"        for(int i = iter[v]; i < g[v].size(); ++i){",
			"            Edge &e = g[v][i];",
			"            if(e.cap > 0 && level[v] < level[e.to]){",
			"                int d = dfs(e.to, t, min(f, e.cap));",
			"                if(d > 0){",
			"                    e.cap -= d;",
			"                    g[e.to][e.rev].cap += d;",
			"                    return d;",
			"                }",
			"            }",
			"        }",
			"        return 0;",
			"    }",
			"",
			"    int max_flow(int s, int t){",
			"        int flow = 0;",
			"        while(true){",
			"            bfs(s);",
			"            if(level[t] < 0) return flow;",
			"            iter = vector<int>(size);",
			"            int f;",
			"            while((f = dfs(s, t, INF)) > 0) flow += f;",
			"        }",
			"    }",
			"};",
			"",
		],
		"description": "Dinic"
	},
	
	"Edge": {
		"prefix": "edge",
		"body": [
			"struct Edge{",
			"    int to;",
			"    ${1:T} cost;",
			"};",
			"vector<Edge> g[${2:n}];",
			""
		],
		"description": "Edge"
	},

	"Extend GCD": {
		"prefix": "extgcd define",
		"body":[
			"int extgcd(int a, int b, int &x, int &y){",
			"    int d = a;",
			"    if(b != 0){",
			"        d = extgcd(b, a % b, y, x);",
			"        y -= (a / b) * x;",
			"    }",
			"    else{",
			"        x = 1; y = 0;",
			"    }",
			"    return d;",
			"}"
		],
		"description": "Define extgcd"
	},

	"Mod Pow" : {
		"prefix": "modpow",
		"body": [
			"int mod_pow(int x, int y){",
			"    ll tmp = x, ret = 1;",
			"    while(y){",
			"        if(y & 1){",
			"            ret *= tmp;",
			"            ret %= MOD;",
			"        }",
			"        tmp = tmp * tmp % MOD;",
			"        y >>= 1;",
			"    }",
			"    return ret;",
			"}"
		],
		"description": "mod_pow"
	},
	
	"Segment Tree": {
		"prefix": "segtree",
		"body": [
			"",
			"// T: 要素の型, E: 作用素の型",
			"template<typename T, typename E>",
			"class SegmentTree{",
			"    using F = function<T(T, T)>;",
			"    using G = function<T(T, E)>;",
			"    using H = function<E(E, E)>;",
			"    using P = function<E(E, int)>;",
			"    vector<T> node; // セグ木本体",
			"    vector<E> lazy; // 遅延評価",
			"    F f; // 要素を合成する関数",
			"    G g; // 要素に作用素を作用させる関数",
			"    H h; // 作用素を合成する関数",
			"    P p; // p(e, n) = 作用素e(∈E)をn回作用させたときの値",
			"    T e_T; // (T, f)の単位元",
			"    E e_E; // (E, h)の単位元で、g(t, e_E) = tを満たす",
			"    int n; // nは2のべき乗で、n/2 < 要素数 <= nを満たす",
			"",
			"    // [l, r)を表すk番目のノードの遅延評価を行う",
			"    void eval(int k, int l, int r){",
			"        if(lazy[k] == e_E) return;",
			"        if(k < n-1){",
			"            lazy[k*2+1] = h(lazy[k*2+1], lazy[k]);",
			"            lazy[k*2+2] = h(lazy[k*2+2], lazy[k]);",
			"        }",
			"        node[k] = g(node[k], p(lazy[k], r - l));",
			"        lazy[k] = e_E;",
			"    }",
			"",
			"    // a, b, x: 区間[a, b)に作用させたい値",
			"    // k, l, r: 更新する、[l, r)を管理するノードk",
			"    // 戻り値: xを作用させたあとの[a, b)における実際の値(node[k] + lazy[k]*length)",
			"    T update(int a, int b, E x, int k, int l, int r){",
			"        eval(k, l, r);",
			"        if(r <= a || b <= l) return node[k];",
			"        if(a <= l && r <= b){",
			"            lazy[k] = h(lazy[k], x);",
			"            return g(node[k], p(lazy[k], r-l));",
			"        }",
			"        return node[k] = f(update(a, b, x, 2*k+1, l, (l+r) / 2), update(a, b, x, 2*k+2, (l+r)/2, r));",
			"    }",
			"    ",
			"    // a, b: 求めたいf(...f(a, a+1), ...), b)",
			"    // k, l, r: 更新する、[l, r)を管理するノードk",
			"    T accumulate(int a, int b, int k, int l, int r){",
			"        if(b <= l || r <= a) return e_T;",
			"        eval(k, l, r);",
			"        if(a <= l && r <= b) return node[k];",
			"        return f(accumulate(a, b, 2*k+1, l, (l+r) / 2), accumulate(a, b, 2*k+2, (l+r) / 2, r));",
			"    }",
			"",
			"public:",
			"    SegmentTree(int _n, F _f, G _g, H _h, P _p, T _e_T, E _e_E, vector<T> data){",
			"        f = _f;",
			"        g = _g;",
			"        h = _h;",
			"        p = _p;",
			"        e_T = _e_T;",
			"        e_E = _e_E;",
			"        n = 1;",
			"        while(n < _n) n *= 2;",
			"        node.resize(2*n-1, e_T);",
			"        lazy.resize(2*n-1, e_E);",
			"        for(int i = 0; i < data.size(); ++i){",
			"            node[i+n-1] = data[i];",
			"        }",
			"        for(int i = n-2; i >= 0; --i){",
			"            node[i] = f(node[2*i+1], node[2*i+2]);",
			"        }",
			"    }",
			"",
			"    T update(int a, int b, E x){",
			"        return update(a, b, x, 0, 0, n);",
			"    }",
			"",
			"    T accumulate(int a, int b){",
			"        return accumulate(a, b, 0, 0, n);",
			"    }",
			"",
			"    T operator[](int k){",
			"        return accumulate(k, k+1);",
			"    }",
			"};",
			""
		],
		"description": "遅延評価SegmentTree"
	},
	
	"Union Find Tree" : {
		"prefix": "UF",
		// source code by Spaghetti Source [http://www.prefield.com/algorithm/container/union_find.html]
		"body": ["struct UnionFind {",
			"    vector<int> data;",
			"    UnionFind(int size) : data(size, -1) { }",
			"    bool unionSet(int x, int y) {",
			"        x = root(x); y = root(y);",
			"        if (x != y) {",
			"            if (data[y] < data[x]) swap(x, y);",
			"            data[x] += data[y]; data[y] = x;",
			"        }",
			"        return x != y;",
			"    }",
			"    bool findSet(int x, int y) {",
			"        return root(x) == root(y);",
			"    }",
			"    int root(int x) {",
			"        return data[x] < 0 ? x : data[x] = root(data[x]);",
			"    }",
			"    int size(int x) {",
			"        return -data[root(x)];",
			"    }",
			"};",
			""
		],
		"description": "Union Find Tree"
	}

}
